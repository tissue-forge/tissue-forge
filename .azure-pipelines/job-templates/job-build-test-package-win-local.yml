parameters:
  name: ''
  platform_name: 'win64'
  tf_buildqual: ''
  py_minor_version: 8
  working_dir: ''
  staging_dir: ''

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.name }}
    continueOnError: false
    timeoutInMinutes: 0
    variables:
      PY_VERSION_DEC: ${{ format('3.{0}', parameters.py_minor_version) }}
      PY_VERSION_LAB: ${{ format('py3{0}', parameters.py_minor_version) }}
      ROOT_DIR: '${{ parameters.working_dir }}'
      SOURCE_DIR: '$(ROOT_DIR)\tissue-forge'
      INSTALL_DIR: '$(ROOT_DIR)\tissue-forge_install'
      EXEC_PYTHON: '$(INSTALL_DIR)\env\python.exe'
    workspace:
      clean: all
    steps:
      
      # Setup
      - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
        displayName: Add conda to path
      - checkout: self
        submodules: recursive
        path: tissue-forge
        displayName: Get source
      - script: |
          call conda config --add channels conda-forge
          call $(SOURCE_DIR)\package\local\win\install_vars
          conda create --yes --prefix %TFENV%
          conda env update --prefix %TFENV% --file %TFSRCDIR%\package\local\win\env.yml
          call activate %TFENV%
          conda install -y python=$(PY_VERSION_DEC)
        displayName: Conda setup
      
      # Build
      - script: |
          call $(SOURCE_DIR)\package\local\win\install_vars
          call activate %TFENV%
          call conda list
          set TFBUILDQUAL=${{ parameters.tf_buildqual }}
          call $(SOURCE_DIR)\package\local\win\install_all
        displayName: Execute build
      
      # Test
      - script: |
          call $(SOURCE_DIR)\package\local\win\install_vars
          call activate %TFENV%
          conda install -y pytest
          call conda list
          call $(SOURCE_DIR)\testing\build_tests
          call $(INSTALL_DIR)\etc\vars
          call $(SOURCE_DIR)\testing\run_tests
        displayName: Run tests
        continueOnError: true
      
      # Package
      - script: |
          call $(INSTALL_DIR)\etc\vars
          call activate %TFENV%
          $(EXEC_PYTHON) $(SOURCE_DIR)\.azure-pipelines\env-recipes\rtenv.py -v $(PY_VERSION_DEC) -p ${{ parameters.platform_name }}
        displayName: Generate environment recipe
      - task: CopyFiles@2
        inputs:
          sourceFolder: $(INSTALL_DIR)
          contents: |
            **\*
            !env\**\*
          targetFolder: ${{ parameters.staging_dir }}
        displayName: Stage package
      - task: CopyFiles@2
        inputs:
          sourceFolder: $(SOURCE_DIR)
          contents: |
            .azure-pipelines\env-installers\install_env.bat
            .azure-pipelines\env-recipes\rtenv.yml
          targetFolder: ${{ parameters.staging_dir }}
          flattenFolders: true
        displayName: Stage package helpers
      
      # Publish
      - publish: ${{ parameters.staging_dir }}
        artifact: tissue_forge-${{ parameters.platform_name }}-$(PY_VERSION_LAB)
        displayName: Publish package
