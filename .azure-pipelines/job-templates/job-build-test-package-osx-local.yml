parameters:
  name: ''
  platform_name: 'osx64'
  tf_buildqual: ''
  py_minor_version: 10
  working_dir: ''
  staging_dir: ''

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.name }}
    continueOnError: false
    timeoutInMinutes: 0
    variables:
      PY_VERSION_DEC: ${{ format('3.{0}', parameters.py_minor_version) }}
      PY_VERSION_LAB: ${{ format('py3{0}', parameters.py_minor_version) }}
      ROOT_DIR: '${{ parameters.working_dir }}'
      CONDA_INSTALL: '$(ROOT_DIR)/miniconda'
      SOURCE_DIR: '$(ROOT_DIR)/tissue-forge'
      INSTALL_DIR: '$(ROOT_DIR)/tissue-forge_install'
      EXEC_PYTHON: '$(INSTALL_DIR)/env/bin/python'
      OSX_SYSROOT: '14.1'
      DEPLOYMENT_TARGET: '12.5'
    workspace:
      clean: all
    steps:
      
      # Setup
      - script: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh
          bash ~/miniconda.sh -b -p $(CONDA_INSTALL)
          source $(CONDA_INSTALL)/bin/activate
          conda init --all
        displayName: Install conda
      - bash: echo "##vso[task.prependpath]$(CONDA_INSTALL)/bin"
        displayName: Add conda to path
      - bash: sudo chown -R $USER $(CONDA_INSTALL)
        displayName: Take ownership of conda installation
      - checkout: self
        submodules: recursive
        path: tissue-forge
        displayName: Get source
      - script: |
          conda config --add channels conda-forge
          conda config --set channel_priority strict
          conda config --show channels
        displayName: Conda setup
      - script: | 
          echo "Current developer directory: $(xcode-select -p)"
          sdk_path=/Applications/Xcode_$(OSX_SYSROOT).app/Contents/Developer
          echo "Selecting SDK: ${sdk_path}"
          sudo xcode-select --switch ${sdk_path}
        displayName: Select SDK
      
      # Build
      - script: |
          source $(SOURCE_DIR)/package/local/osx/install_vars.sh
          bash $(SOURCE_DIR)/package/local/osx/install_env.sh
          source activate ${TFENV}
          conda install -y python=$(PY_VERSION_DEC)
          conda list
          export TFBUILDQUAL=${{ parameters.tf_buildqual }}
          export TF_OSX_DEPLOYMENT_TARGET=$(DEPLOYMENT_TARGET)
          bash $(SOURCE_DIR)/package/local/osx/install_all.sh
        displayName: Execute build
      
      # Test
      - script: |
          source $(SOURCE_DIR)/package/local/osx/install_vars.sh
          source activate ${TFENV}
          conda install -y pytest
          conda list
          bash $(SOURCE_DIR)/testing/build_tests.sh
          source $(INSTALL_DIR)/etc/vars.sh
          bash $(SOURCE_DIR)/testing/run_tests.sh
        displayName: Run tests
        continueOnError: true
      
      # Package
      - script: |
          source $(INSTALL_DIR)/etc/vars.sh
          source activate ${TFENV}
          $(EXEC_PYTHON) $(SOURCE_DIR)/.azure-pipelines/env-recipes/rtenv.py -v $(PY_VERSION_DEC) -p ${{ parameters.platform_name }}
        displayName: Generate environment recipe
      - task: CopyFiles@2
        inputs:
          sourceFolder: $(INSTALL_DIR)
          contents: |
            **/*
            !env/**/*
          targetFolder: ${{ parameters.staging_dir }}
        displayName: Stage package
      - task: CopyFiles@2
        inputs:
          sourceFolder: $(SOURCE_DIR)
          contents: |
            .azure-pipelines/env-installers/install_env.sh
            .azure-pipelines/env-recipes/rtenv.yml
          targetFolder: ${{ parameters.staging_dir }}
          flattenFolders: true
        displayName: Stage package helpers
      
      # Publish
      - publish: ${{ parameters.staging_dir }}
        artifact: tissue_forge-${{ parameters.platform_name }}-$(PY_VERSION_LAB)
        displayName: Publish package
